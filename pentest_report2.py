Updated Python Script with PDF Export, Screenshot Integration, and CVE Linking
Step 1: Install Required Libraries

First, you'll need to install the following Python libraries:

    markdown2: Converts Markdown to HTML.
    weasyprint: Converts HTML to PDF.
    cve-search: To look up vulnerabilities by their CVE ID.
    PIL (Python Imaging Library): For handling image files (screenshots).

Run these commands to install the libraries:

bash

pip install markdown2 weasyprint cve-search pillow

Step 2: Updated Python Script

python

import os
from datetime import datetime
import markdown2
from weasyprint import HTML
from PIL import Image
import requests

# Define paths
BASE_DIR = os.path.expanduser("~/Pentest_Reports")
TEMPLATE_PATH = os.path.join(BASE_DIR, "report_template.md")
REPORTS_DIR = os.path.join(BASE_DIR, "reports")
SCREENSHOTS_DIR = os.path.join(BASE_DIR, "screenshots")

# Create directories if they don't exist
os.makedirs(REPORTS_DIR, exist_ok=True)
os.makedirs(SCREENSHOTS_DIR, exist_ok=True)

# Report Template
REPORT_TEMPLATE = """# Penetration Test Report

## Client Information
- **Client Name**: 
- **Date**: 
- **Assessment Type**: 
- **Scope**: 

---

## Executive Summary
Provide a high-level summary of the findings.

---

## Vulnerabilities
### 1. Vulnerability Title
- **Severity**: 
- **Description**: 
- **Impact**: 
- **Recommendation**: 
- **CVE Reference**: 

---

## Tools and Techniques
List of tools and techniques used during the assessment.

---

## Appendices
- **Logs**:
- **Screenshots**:
"""

# Function to create the report template if it doesn't exist
def create_template():
    if not os.path.isfile(TEMPLATE_PATH):
        with open(TEMPLATE_PATH, "w") as template_file:
            template_file.write(REPORT_TEMPLATE)
        print(f"Template created at {TEMPLATE_PATH}")
    else:
        print(f"Template already exists at {TEMPLATE_PATH}")

# Function to create a new report
def create_report():
    client_name = input("Enter the client name: ")
    today = datetime.now().strftime("%Y%m%d")
    report_name = f"report_{client_name}_{today}.md"
    report_path = os.path.join(REPORTS_DIR, report_name)

    # Copy template content to the new report
    with open(TEMPLATE_PATH, "r") as template_file:
        template_content = template_file.read()

    # Create the new report file
    with open(report_path, "w") as report_file:
        report_file.write(template_content)

    print(f"New report created at {report_path}")
    return report_path

# Function to add a note to an existing report
def add_note():
    keyword = input("Enter the client name or report date (YYYYMMDD) to find the report: ")
    matching_files = [f for f in os.listdir(REPORTS_DIR) if keyword in f]

    if matching_files:
        print(f"Found the following reports: {matching_files}")
        report_name = matching_files[0]  # Assuming the first match
        report_path = os.path.join(REPORTS_DIR, report_name)

        with open(report_path, "a") as report_file:
            note = input("Enter the note you want to add: ")
            report_file.write(f"\n## Additional Note ({datetime.now().strftime('%Y-%m-%d %H:%M:%S')})\n{note}\n")
        print(f"Note added to {report_name}")
    else:
        print(f"No report found with the keyword '{keyword}'.")

# Function to embed a screenshot in the report
def add_screenshot(report_path):
    screenshot_name = input("Enter the screenshot file name (with extension): ")
    screenshot_path = os.path.join(SCREENSHOTS_DIR, screenshot_name)
    
    if os.path.isfile(screenshot_path):
        with open(report_path, "a") as report_file:
            report_file.write(f"\n![Screenshot](../screenshots/{screenshot_name})\n")
        print(f"Screenshot embedded in {report_path}")
    else:
        print(f"Screenshot file '{screenshot_name}' not found.")

# Function to export the report to PDF
def export_to_pdf(report_path):
    with open(report_path, "r") as report_file:
        markdown_content = report_file.read()

    html_content = markdown2.markdown(markdown_content)
    pdf_name = os.path.splitext(os.path.basename(report_path))[0] + ".pdf"
    pdf_path = os.path.join(REPORTS_DIR, pdf_name)

    # Convert HTML to PDF
    HTML(string=html_content).write_pdf(pdf_path)
    print(f"PDF report created at {pdf_path}")

# Function to fetch CVE details
def get_cve_details(cve_id):
    response = requests.get(f"https://cve.circl.lu/api/cve/{cve_id}")
    
    if response.status_code == 200:
        cve_data = response.json()
        cve_summary = cve_data.get("summary", "No summary available.")
        print(f"CVE {cve_id}: {cve_summary}")
        return cve_summary
    else:
        print(f"Failed to fetch details for {cve_id}")
        return None

# Menu system
def main_menu():
    while True:
        print("\nPenetration Test Reporting Tool")
        print("1. Create New Report")
        print("2. Add Notes to Existing Report")
        print("3. Add Screenshot to Report")
        print("4. Export Report to PDF")
        print("5. Fetch CVE Details")
        print("6. Exit")

        choice = input("Select an option [1-6]: ")
        if choice == "1":
            create_report()
        elif choice == "2":
            add_note()
        elif choice == "3":
            report_path = input("Enter the report path: ")
            add_screenshot(report_path)
        elif choice == "4":
            report_path = input("Enter the report path: ")
            export_to_pdf(report_path)
        elif choice == "5":
            cve_id = input("Enter the CVE ID (e.g., CVE-2023-12345): ")
            get_cve_details(cve_id)
        elif choice == "6":
            print("Exiting...")
            break
        else:
            print("Invalid option. Please try again.")

if __name__ == "__main__":
    create_template()  # Ensure the template is created
    main_menu()
