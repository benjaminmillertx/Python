import os
import stat

# List of known suspicious file extensions for Linux
SUSPICIOUS_EXTENSIONS = ['.sh', '.elf', '.bin', '.py', '.pl']

# List of common malware signatures (substitute with known values)
MALWARE_SIGNATURES = [
    b'MZ',  # Commonly indicates windows executables but could be there in other malware
    b'\x7fELF',  # Indicates ELF binaries which is common for Linux executables
    # Add more byte sequences that are characteristic of known malware
]

def is_malware(file_path):
    # Check file extension
    _, ext = os.path.splitext(file_path)
    if ext.lower() in SUSPICIOUS_EXTENSIONS:
        return True

    # Check file permissions for dangerous scripts/executables
    permissions = os.stat(file_path).st_mode
    if bool(permissions & stat.S_IEXEC) and not (permissions & stat.S_IWUSR):
        return True

    # Read file content and check for malware signatures
    try:
        with open(file_path, 'rb') as file:
            content = file.read()
            for signature in MALWARE_SIGNATURES:
                if signature in content:
                    return True
    except Exception as e:
        print(f"Error reading {file_path}: {e}")

    return False

def scan_directory(directory):
    malware_files = []
    for root, _, files in os.walk(directory):
        for file in files:
            file_path = os.path.join(root, file)
            try:
                if is_malware(file_path):
                    malware_files.append(file_path)
            except Exception as e:
                print(f"Error scanning {file_path}: {e}")
    
    return malware_files

if __name__ == "__main__":
    directory_to_scan = input("Enter the directory to scan for malware: ")
    found_malware = scan_directory(directory_to_scan)

    if found_malware:
        print("Potential malware files found:")
        for malware in found_malware:
            print(malware)
    else:
        print("No potential malware files found.")

Explanation:

    Suspicious Extensions: The script focuses on file extensions commonly associated with executables and scripts in Linux.

    File Permissions: It checks if a file is executable and not writable by the user, which could indicate a dangerous file that might be run.

    Malware Signatures: It reads through the file content looking for specific byte patterns that indicate potential malware, specifically ELF binaries that are typical for Linux.

    File Scanning: The scan_directory function traverses the directory tree, checking each file against the defined criteria.

    Error Handling: Basic error handling is used to continue scanning even if some files can't be read.
